const biaisData = [
      {
        name: "Biais de confirmation",
        icon: "fa-solid fa-magnifying-glass",
        description: "Tendance √† privil√©gier les informations confirmant ses croyances.",
        example: "J'ai lu plusieurs articles qui disent que les vaccins sont dangereux, donc cela doit √™tre vrai.",
        phrase: "Marie ne lit que des actualit√©s qui vont dans le sens de ses opinions politiques.",
      },
      {
        name: "Biais de disponibilit√©",
        icon: "fa-solid fa-bolt",
        description: "Juger la probabilit√© d'un √©v√©nement selon la facilit√© avec laquelle on s'en souvient.",
        example: "Comme il y a eu un accident d'avion r√©cemment, Paul pense que voyager en avion est dangereux.",
        phrase: "Apr√®s avoir entendu parler d'une attaque de requin, Lucie pense que se baigner en mer est risqu√©.",
      },
      {
        name: "Effet d'ancrage",
        icon: "fa-solid fa-anchor",
        description: "Accorder trop d'importance √† la premi√®re information re√ßue.",
        example: "Si un t-shirt est affich√© √† 100‚Ç¨ puis sold√© √† 60‚Ç¨, on pense r√©aliser une bonne affaire m√™me si sa valeur r√©elle est 40‚Ç¨.",
        phrase: "Le vendeur commence en proposant un prix tr√®s √©lev√©, ce qui influence la n√©gociation par la suite.",
      },
      {
        name: "Biais d'attribution",
        icon: "fa-solid fa-user-check",
        description: "Attribuer le comportement des autres √† leur caract√®re, pas √† la situation.",
        example: "Si quelqu'un se trompe en public, on pense qu'elle est maladroite plut√¥t que stress√©e.",
        phrase: "Quand Pierre rate sa pr√©sentation, ses coll√®gues pensent qu'il est incomp√©tent, sans consid√©rer qu'il √©tait malade.",
      },
      {
        name: "Effet de halo",
        icon: "fa-solid fa-star",
        description: "Penser qu'une qualit√© positive implique d'autres qualit√©s positives.",
        example: "Penser qu'une personne belle est aussi intelligente ou gentille.",
        phrase: "Parce qu'Am√©lie est souriante, on suppose qu'elle est forc√©ment comp√©tente au travail.",
      },
      {
        name: "Biais de n√©gativit√©",
        icon: "fa-solid fa-thumbs-down",
        description: "Donner plus de poids aux exp√©riences n√©gatives qu'aux positives.",
        example: "Apr√®s un commentaire n√©gatif parmi beaucoup de positifs, Maxime ne pense qu'√† la critique.",
        phrase: "Sur dix compliments et une critique, Julie ne retient que la critique.",
      },
      {
        name: "Biais de statu quo",
        icon: "fa-solid fa-clock-rotate-left",
        description: "Pr√©f√©rer que les choses restent telles qu'elles sont.",
        example: "Refuser un nouvel outil au travail m√™me s'il am√©liore l'efficacit√©.",
        phrase: "Paul pr√©f√®re les anciennes habitudes et rejette toute nouvelle m√©thode au bureau.",
      },
      {
        name: "Biais de l'optimisme",
        icon: "fa-solid fa-face-smile",
        description: "Surestimer la probabilit√© que des choses positives nous arrivent.",
        example: "Penser qu'il ne nous arrivera jamais d'accident de voiture, contrairement aux autres.",
        phrase: "L√©a ne pense jamais qu'elle pourrait se blesser en pratiquant des sports extr√™mes.",
      }
    ];

    // Shuffle bias list for answer order
    function shuffledBiaisList() {
      return biaisData
        .map((b, i) => ({...b, idx: i}))
        .sort(() => Math.random() - 0.5);
    }

    // Shuffle questions at each game
    function shuffledQuestions() {
      return biaisData
        .map((b, i) => ({ biais: b, answer: i}))
        .sort(() => Math.random() - 0.5)
        .map(x => x.answer)
    }

    // Game State
    let qIndices = [];
    let curr = 0;
    let points = 0;
    let selected = null;
    let ended = false;

    const phraseEl = document.getElementById('phrase');
    const biaisListEl = document.getElementById('biais-list');
    const confirmBtn = document.getElementById('confirm');
    const feedbackEl = document.getElementById('feedback');
    const nextBtn = document.getElementById('next');
    const scoreEl = document.getElementById('score');
    const endMsg = document.getElementById('end-message');
    const restartBtn = document.getElementById('restart');

    function updateScore() {
      scoreEl.textContent = `Score : ${points} / ${qIndices.length}`;
    }

    function showQuestion() {
      selected = null;
      confirmBtn.disabled = true;
      feedbackEl.className = "feedback";
      feedbackEl.innerHTML = "";
      nextBtn.style.display = "none";
      endMsg.style.display = "none";
      restartBtn.style.display = "none";

      if(curr >= qIndices.length) {
        showEnd();
        return;
      }

      updateScore();

      const qIdx = qIndices[curr];
      phraseEl.textContent = biaisData[qIdx].phrase;

      // Shuffle bias order for answers
      const options = shuffledBiaisList();
      biaisListEl.innerHTML = "";
      options.forEach(opt => {
        const btn = document.createElement('button');
        btn.className = "biais-btn";
        btn.innerHTML = `<i class="${opt.icon}"></i> ${opt.name}`;
        btn.onclick = () => {
          setSelected(opt.idx, btn);
        };
        btn.title = opt.description;
        biaisListEl.appendChild(btn);
        btn.dataset.idx = opt.idx;
      });
    }

    function setSelected(idx, btn) {
      selected = idx;
      // Unselect all
      Array.from(biaisListEl.children).forEach(b => b.classList.remove('selected'));
      btn.classList.add('selected');
      confirmBtn.disabled = false;
    }

    function handleConfirm() {
      if(selected === null || ended) return;
      confirmBtn.disabled = true;

      const qIdx = qIndices[curr];
      const correct = (selected === qIdx);

      // Feedback
      if(correct) {
        feedbackEl.className = "feedback success";
        feedbackEl.innerHTML = `<i class="fa-solid fa-check-circle"></i> Bravo !`;
        points++;
      } else {
        feedbackEl.className = "feedback fail";
        feedbackEl.innerHTML = `<i class="fa-solid fa-xmark-circle"></i> Mauvaise r√©ponse<br><span style='font-weight:400;font-size:0.97em;'>Biais correct : <b>${biaisData[qIdx].name}</b></span>`;
      }

      updateScore();

      // Disable further answer selection
      Array.from(biaisListEl.children).forEach(b => {
        b.onclick = null;
        b.disabled = true;
        if(Number(b.dataset.idx) === qIdx)
          b.style.border = "2px solid #43a047";
        else if(Number(b.dataset.idx) === selected)
          b.style.border = "2px solid #ea0a41";
      });

      setTimeout(() => {
        nextBtn.style.display = "";
        nextBtn.disabled = false;
      }, 420);
    }

    function nextQuestion() {
      curr++;
      showQuestion();
    }

    function showEnd() {
      ended = true;
      feedbackEl.className = "feedback";
      feedbackEl.innerHTML = "";
      biaisListEl.innerHTML = "";
      phraseEl.textContent = "Partie termin√©e !";
      scoreEl.textContent = `Score final : ${points} / ${qIndices.length}`;
      endMsg.style.display = "";
      if(points === qIndices.length) {
        endMsg.textContent = "Parfait ! Aucun biais ne t'√©chappe üèÜ";
      } else if(points >= qIndices.length * 0.7) {
        endMsg.textContent = "Tr√®s bien jou√©, tu ma√Ætrises les biais üôå";
      } else if(points >= qIndices.length * 0.4) {
        endMsg.textContent = "Pas mal, pers√©v√®re pour tous les d√©tecter ! üòâ";
      } else {
        endMsg.textContent = "Encore un peu d'entra√Ænement ? Les biais sont partout... ü§î";
      }
      restartBtn.style.display = "";
      nextBtn.style.display = "none";
      confirmBtn.style.display = "none";
    }

    function startGame() {
      ended = false;
      curr = 0;
      points = 0;
      confirmBtn.style.display = "";
      // Shuffle questions
      qIndices = shuffledQuestions();
      nextBtn.style.display = "none";
      endMsg.style.display = "none";
      restartBtn.style.display = "none";
      showQuestion();
    }

    // Event listeners
    confirmBtn.onclick = handleConfirm;
    nextBtn.onclick = nextQuestion;
    restartBtn.onclick = startGame;

    // INIT
    startGame();